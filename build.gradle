import static org.gradle.internal.os.OperatingSystem.*

plugins {
    id 'java'
    id 'java-library'
    id "org.jetbrains.kotlin.jvm" version "1.3.61"
    id "com.github.johnrengelman.shadow" version '5.2.0'
}

// jitpack
group = 'com.github.kotlin_graphics'

ext {
    kot = 'org.jetbrains.kotlin:kotlin'
    kx = "com.github.kotlin-graphics"
    kotlin_version = '1.3.70'
    kotlintest_version = '3.4.2'
    uno_version = 'jdk8-SNAPSHOT'
    vkk_version = 'jdk8-SNAPSHOT'
    gln_version = 'jdk8-SNAPSHOT'
    gli_version = 'jdk8-SNAPSHOT'
    glm_version = 'jdk8-SNAPSHOT'
    unsigned_version = 'jdk8-SNAPSHOT'
    kool_version = 'jdk8-SNAPSHOT'
    lwjgl_version = "3.2.3"
    lwjgl_natives = "linux-arm64"
}

dependencies {

    implementation "$kot-stdlib-jdk8"
    implementation "$kot-reflect"

//    implementation "$kx:uno-sdk:$uno_version"
    api files('libs/uno-core.jar')
    api files('libs/uno-awt.jar')
    implementation "$kx:gli:$gli_version"
    implementation "${kx}:glm:$glm_version"
//    testImplementation "${kx}.glm:glm-test:$glm_version"
    implementation "$kx:kool:$kool_version"
    implementation "$kx:kotlin-unsigned:$unsigned_version"

    testImplementation "io.kotlintest:kotlintest-runner-junit5:$kotlintest_version".toString()

    implementation 'io.github.microutils:kotlin-logging:1.7.8'

//    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'

    //implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
	implementation 'org.slf4j:slf4j-api:1.7.29'
    testImplementation 'org.slf4j:slf4j-simple:1.7.29'

    ["", "-glfw", "-jemalloc", "-openal", "-opengl", "-stb"].each {
        implementation "org.lwjgl:lwjgl$it:$lwjgl_version"
        runtimeOnly "org.lwjgl:lwjgl$it:$lwjgl_version:natives-$lwjgl_natives"
    }
}

repositories {
    mavenCentral()
    maven { setUrl("https://dl.bintray.com/kotlin/kotlin-dev") }
    maven { setUrl("https://oss.sonatype.org/content/repositories/snapshots/") }
    maven { setUrl('https://jitpack.io') }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

test {
    useJUnitPlatform()

    maxHeapSize = "1G"
//    systemProperties['junit.jupiter.execution.parallel.enabled'] = true
//    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
//    forkEvery = 1
}

artifacts {
    archives sourcesJar
//    archives javadocJar
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    destinationDir = compileJava.destinationDir
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
    destinationDir = compileTestJava.destinationDir
}

//compileJava {
//    dependsOn(':compileKotlin')
//    inputs.property("moduleName", moduleName)
//    doFirst {
//        options.compilerArgs = [
//                '--module-path', classpath.asPath,
//                '--patch-module', "$moduleName=${sourceSets["main"].output.asPath}"]
//        classpath = files()
//    }
//}

jar { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }

shadowJar{
    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
